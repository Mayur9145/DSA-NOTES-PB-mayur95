Time complexity-o(n-square)
Space complexity-o(n)

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        n=len(nums)-1
     
        total=0
        nums.sort()
        res=[]

        for i in range(n):
            if i>0 and nums[i]==nums[i-1]:
                continue
            
            low=i+1
            high=n
            while low<high:
                total=nums[i]+nums[low]+nums[high]
                if total==0:
                    res.append([nums[i], nums[low], nums[high]])
                    while low<high and nums[low]==nums[low+1]:
                        low+=1

                    while low<high and nums[high]==nums[high-1]:
                        high-=1
                    low += 1
                    high -= 1
                            
                elif total < 0:
                    low += 1
                else:
                    high -= 1
            
        return res