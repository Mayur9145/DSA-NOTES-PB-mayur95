leetcode-https://leetcode.com/problems/find-peak-element/submissions/1326780752/

Time Complexity-o(n)
Space Complexity-o(1)

class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        n=len(nums)
        low,high=0,n-1
        if n==1:
            return 0
        # applying binary search algorithm
        while low<=high:
            mid=low+(high-low)//2
            if (mid==0 and nums[mid]>nums[mid+1]) or (mid==n-1 and nums[mid]> nums[mid-1]) or (nums[mid]>nums[mid+1] and nums[mid]>nums[mid-1]):
                return mid
            elif nums[mid]<nums[mid+1]:
                low=mid+1
            else:
                high=mid-1